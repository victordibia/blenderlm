from abc import ABC, abstractmethod
from typing import AsyncGenerator, List, Literal, Optional, Union, Dict, Any
from pydantic import BaseModel, Field
from PIL import Image

# Define the type for the task input, allowing string or list containing text and PIL Images
AgentTask = Union[str, List[Union[str, Image.Image]]]

# Define the standardized message format
class AgentMessage(BaseModel):
    """Standardized message object returned by agent runs."""
    content: Optional[str] = None
    role: Literal["user", "assistant", "tool"] = "assistant"
    tool_calls: Optional[List[Dict[str, Any]]] = None # For potential tool/function calling
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict) # For extra info like usage, finish reasons


# Define the abstract base class for all agents
class BaseAgent(ABC):
    """Abstract base class for language model agents."""

    @abstractmethod
    async def run(self, task: AgentTask) -> AgentMessage: # Changed to async def
        """
        Runs the agent with the given task and returns a single response.

        Args:
            task: The input task, which can be a string or a list containing
                  strings and PIL Image objects.

        Returns:
            An AgentMessage object containing the agent's response.
        """
        pass

    @abstractmethod
    async def run_stream(self, task: AgentTask) -> AsyncGenerator[AgentMessage, None]:
        """
        Runs the agent with the given task and streams the response.

        Args:
            task: The input task, which can be a string or a list containing
                  strings and PIL Image objects.

        Yields:
            AgentMessage objects as they are generated by the agent.
        """
        # The 'yield' statement is needed to make this an async generator method.
        # The actual implementation in subclasses will yield results.
        # This line is just a placeholder for type checking and abstract method definition.
        if False: # pragma: no cover
            yield AgentMessage()

